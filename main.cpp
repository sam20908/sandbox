#include <benchmark/benchmark.h>

#include <Eigen/Dense>
#include <Eigen/LU>

#include <mpp/matrix.hpp>
#include <mpp/algorithm.hpp>

#include <iostream>

static void MPP_Determinant(benchmark::State &state)
{
    const auto mat = mpp::matrix<int>{1000, 1000};

    for (auto _ : state)
    {
        benchmark::DoNotOptimize(mpp::determinant(mat));
        benchmark::ClobberMemory();
    }
}

static void Eigen_Determinant(benchmark::State &state)
{
    const auto mat = Eigen::MatrixXf{1000, 1000};

    for (auto _ : state)
    {
        benchmark::DoNotOptimize(mat.determinant());
        benchmark::ClobberMemory();
    }
}

static void MPP_LU_Decomposition(benchmark::State &state)
{
    const auto mat = mpp::matrix<int>{{-41668, -44581, -91758, -20233, -45119, -74207, -87158, -67066, -54942, -12212},
                                      {-42183, 20158, -54978, -54021, -88555, -92971, -13508, -3017, -22314, -14277},
                                      {-7839, 122, 5550, -56585, -2280, -18856, 3411, -91071, -39818, 8742},
                                      {-35232, -23025, 6758, -1436, -38327, 149, -84336, -9510, -80955, -47596},
                                      {7792, -62937, 1017, -67774, 21800, -44648, -45898, -65331, -42943, 16271},
                                      {-7916, -60446, -71793, -58826, 19339, -88142, -56418, 14055, -23726, -15071},
                                      {-69616, 4387, -76989, 23945, -65135, -40953, -34474, -68479, 3986, 17625},
                                      {-74176, -82017, -71238, -32966, -13533, -64783, 3670, -45698, -50701, -72494},
                                      {-5174, -18568, -735, 15478, -64182, -22459, 4694, -73210, -49426, -64093},
                                      {11796, -54647, -58976, -21779, -30670, 9760, -63220, -60230, -67456, -91657}};

    for (auto _ : state)
    {
        benchmark::DoNotOptimize(mpp::lu_decomposition(mat));
        benchmark::ClobberMemory();
    }
}

static void Eigen_LU_Decomposition(benchmark::State &state)
{
    const auto mat = Eigen::MatrixXf{{-41668.f, -44581.f, -91758.f, -20233.f, -45119.f, -74207.f, -87158.f, -67066.f, -54942.f, -12212},
                                     {-42183.f, 20158.f, -54978.f, -54021.f, -88555.f, -92971.f, -13508.f, -3017.f, -22314.f, -14277},
                                     {-7839.f, 122.f, 5550.f, -56585.f, -2280.f, -18856.f, 3411.f, -91071.f, -39818.f, 8742},
                                     {-35232.f, -23025.f, 6758.f, -1436.f, -38327.f, 149.f, -84336.f, -9510.f, -80955.f, -47596},
                                     {7792.f, -62937.f, 1017.f, -67774.f, 21800.f, -44648.f, -45898.f, -65331.f, -42943.f, 16271},
                                     {-7916.f, -60446.f, -71793.f, -58826.f, 19339.f, -88142.f, -56418.f, 14055.f, -23726.f, -15071},
                                     {-69616.f, 4387.f, -76989.f, 23945.f, -65135.f, -40953.f, -34474.f, -68479.f, 3986.f, 17625},
                                     {-74176.f, -82017.f, -71238.f, -32966.f, -13533.f, -64783.f, 3670.f, -45698.f, -50701.f, -72494},
                                     {-5174.f, -18568.f, -735.f, 15478.f, -64182.f, -22459.f, 4694.f, -73210.f, -49426.f, -64093},
                                     {11796.f, -54647.f, -58976.f, -21779.f, -30670.f, 9760.f, -63220.f, -60230.f, -67456.f, -91657.f}};

    for (auto _ : state)
    {
        benchmark::DoNotOptimize(Eigen::FullPivLU<Eigen::MatrixXf>{mat}.matrixLU());
        benchmark::ClobberMemory();
    }
}

static void MPP_Inverse(benchmark::State &state)
{
    const auto mat = mpp::matrix<int>{{-41668, -44581, -91758, -20233, -45119, -74207, -87158, -67066, -54942, -12212},
                                      {-42183, 20158, -54978, -54021, -88555, -92971, -13508, -3017, -22314, -14277},
                                      {-7839, 122, 5550, -56585, -2280, -18856, 3411, -91071, -39818, 8742},
                                      {-35232, -23025, 6758, -1436, -38327, 149, -84336, -9510, -80955, -47596},
                                      {7792, -62937, 1017, -67774, 21800, -44648, -45898, -65331, -42943, 16271},
                                      {-7916, -60446, -71793, -58826, 19339, -88142, -56418, 14055, -23726, -15071},
                                      {-69616, 4387, -76989, 23945, -65135, -40953, -34474, -68479, 3986, 17625},
                                      {-74176, -82017, -71238, -32966, -13533, -64783, 3670, -45698, -50701, -72494},
                                      {-5174, -18568, -735, 15478, -64182, -22459, 4694, -73210, -49426, -64093},
                                      {11796, -54647, -58976, -21779, -30670, 9760, -63220, -60230, -67456, -91657}};

    for (auto _ : state)
    {
        benchmark::DoNotOptimize(mpp::inverse(mat));
        benchmark::ClobberMemory();
    }
}

static void Eigen_Inverse(benchmark::State &state)
{
    const auto mat = Eigen::MatrixXf{{-41668.f, -44581.f, -91758.f, -20233.f, -45119.f, -74207.f, -87158.f, -67066.f, -54942.f, -12212},
                                     {-42183.f, 20158.f, -54978.f, -54021.f, -88555.f, -92971.f, -13508.f, -3017.f, -22314.f, -14277},
                                     {-7839.f, 122.f, 5550.f, -56585.f, -2280.f, -18856.f, 3411.f, -91071.f, -39818.f, 8742},
                                     {-35232.f, -23025.f, 6758.f, -1436.f, -38327.f, 149.f, -84336.f, -9510.f, -80955.f, -47596},
                                     {7792.f, -62937.f, 1017.f, -67774.f, 21800.f, -44648.f, -45898.f, -65331.f, -42943.f, 16271},
                                     {-7916.f, -60446.f, -71793.f, -58826.f, 19339.f, -88142.f, -56418.f, 14055.f, -23726.f, -15071},
                                     {-69616.f, 4387.f, -76989.f, 23945.f, -65135.f, -40953.f, -34474.f, -68479.f, 3986.f, 17625},
                                     {-74176.f, -82017.f, -71238.f, -32966.f, -13533.f, -64783.f, 3670.f, -45698.f, -50701.f, -72494},
                                     {-5174.f, -18568.f, -735.f, 15478.f, -64182.f, -22459.f, 4694.f, -73210.f, -49426.f, -64093},
                                     {11796.f, -54647.f, -58976.f, -21779.f, -30670.f, 9760.f, -63220.f, -60230.f, -67456.f, -91657.f}};

    for (auto _ : state)
    {
        Eigen::MatrixXf mat2;
        benchmark::DoNotOptimize(mat2.noalias() = mat.inverse());
        benchmark::ClobberMemory();
    }
}

BENCHMARK(MPP_Determinant);
BENCHMARK(Eigen_Determinant);
// BENCHMARK(MPP_LU_Decomposition);
// BENCHMARK(Eigen_LU_Decomposition);
// BENCHMARK(MPP_Inverse);
// BENCHMARK(Eigen_Inverse);

BENCHMARK_MAIN();